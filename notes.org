* Introduction: Hello, World Below
This book takes a bottom-up approach.
** Quotes
"The true voyage of discovery consists not of going to new places, but of having a new pair of eyes."
- Marcel Proust

"The only kind of learning which significantly influences behavior is self-discovered or self-appropriated -- truth that has been assimilated in experience."
- Carl Rogers

"What is last in the order of analysis seems to be first in the order of becoming."
- Aristotles
* Chapter 1 - Boolean Logic
"Such simple things, And we make of them something so complex it defeats us, Almost."
- John Ashbery

All chips are made of elementary logic gates. There are multiple ways to physically implement these gates, but their logical behavior is consistent.
** 1.1 - Background
*** Elementary boolean operators
Every possible boolean function can be implemented using any of the following:
- and, or, not
- nand
- nor
*** 16 boolean functions
There are 16 boolean functions with 2 inputs and one output.

There are two inputs, each of which may have two states, so we have 2^2 = 4 possible inputs to our boolean function.

For each of the 4 inputs into the boolean function, there are two possible outputs. So we have 2^2^2 = 16 possible boolean functions.
** 1.2 - Specification
*** Multiplexer and demultiplexer
A "multiplexer" is a type of gate that takes 2 inputs, and a selector (which is a 3rd input, of sorts), and outputs one of the two inputs based on the selector value.

A "demultiplexer" is the opposite. There is a single input, and a selector (which is a 2nd input, of sorts), and outputs the input to one of two possible outputs based on the selector value.
*** Multi-bit gates (bus gates)
Gates usually work on many bits at a time. These many bits are called a "buses".

For example, a 32-bit "or" gate would take two arrays, each containing 32-bits, and perform an "or" operation on each pair of bits, then output a single 32-bit array.
*** Gates with many inputs
"And" and "Or" gates naturally extend to taking many inputs. For example, a 16-way "And" gate would take 16 inputs, and output 1 only if all 16 inputs were 1.
*** Complex multiplexers and demultiplexers
Multiplexer and demultiplexers that have more than 2 inputs or outputs will require multiple bit selectors.
** 1.4 - Perspective
We've paid no attention to efficiency considerations such as number of gates used or the number of wire crossovers.
** Exercises
*** Boolean algebra is useful in simplifying circuits
If you turn a truth table into a boolean formula, you can use boolean algebra to simplify the circuit.

There are things called Karnaugh maps which some say help with the simplification.

Also, saying ~A'~ (with a prime) is a better notation for "not A". It's easier to type for one thing, and also ~A+B~ with a line over the whole thing could mean ~(A+B)'~ or ~(A'+B')~.
*** I cheated
I had to look up an efficient way to build a multiplexor. I was suprised to see it could be done with just 4 nand gates. I could have implemented less efficient multiplexor on my own.
*** Simplifying the Multiplexor
The instructions say:
#+BEGIN_EXAMPLE
/**
 * Multiplexor:
 * out = a if sel == 0
 *       b otherwise
 */
#+END_EXAMPLE

Truth table:
#+BEGIN_EXAMPLE
a b sel | out
0 0  0  |  0
0 0  1  |  0
0 1  0  |  0
0 1  1  |  1
1 0  0  |  1
1 0  1  |  0
1 1  0  |  1
1 1  1  |  1
#+END_EXAMPLE

Simplify the standard formula using boolean algebra:
#+BEGIN_EXAMPLE
a'bs + ab's' + abs' + abs
a'bs + as'(b' + b) + abs
a'bs + as' + abs
as' + a'bs + abs
as' + bs(a' + a)
as' + bs

Note: (x or y) = not (x and y) = (x' and' y')

(as')' .' (bs)'
(a .' s') .' (b .' s)
#+END_EXAMPLE

The implementation:
#+BEGIN_EXAMPLE
CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
    Not(in=sel, out=notSel);
    Nand(a=a, b=notSel, out=nandA);
    Nand(a=sel, b=b, out=nandB);
    Nand(a=nandA, b=nandB, out=out);
}
#+END_EXAMPLE
*** Three ways to simplify boolean functions
- Boolean algebra
- Karnaugh maps
- Quine-McCluskey
*** Simplifying boolean functions is hard
After some tangental study, I've realized circuit optimization is hard, and could fill an entire course of study. I've only been trying to optimize the number of nand gates, but reality would be even more compilcated with costs and efficiency concerns. Quantum physics would even be an issue. I'm going to leave the issue and focus on creating gates that are simple and good-enough, and if I want to worry about optimizing them later I can.
* Chapter 2 - Boolean Arithmetic
The Arithmetic Logical Unit (ALU) is the centerpiece chip that executes all the arithmetic and logical operations performed by the computer. Remarkably, most of the operations performed by computers can be reduced to elementary additions of binary numbers.
** 2.1 - Background
*** 3-bit adder gates to implement traditional addition
When adding numbers by hand on paper, you align 2 numbers, and sometimes have a carry digit. Note, you're sort of working with 3 columns while doing this, the 2 numbers make up 2 of those columns, and the carry digit is the 3rd column. 3-bit adder gates can be chained to implement a binary form of the on-paper addition we're accustomed to doing by hand.
*** Negative binary numbers with the 2's complement method
In a n-bit system, a negative number x is represented by ~2^n - x~ in binary form. For example, in a 4-bit system we'd have:

#+BEGIN_EXAMPLE
0 0000
1 0001 | -1 1111
2 0010 | -2 1110
3 0011 | -3 1101
4 0100 | -4 1100
5 0101 | -5 1011
6 0110 | -6 1010
7 0111 | -7 1001
         -8 1000
#+END_EXAMPLE

Note:
- the minimum and maximum of a n-bit number are ~2^(n-1) - 1~ and ~-2^(n-1)~
- positive numbers begin with 0, and negative numbers begin with 1
- adding opposite numbers results in ~2^n~, which would be ~10000~ in this example, but the most significant bit is truncated, resulting in ~0000~, which is the answer we want
- to negate a number, flip all of its bit and then add 1
** 2.2 - Specification
*** The ALU
The ALU is a circuit which takes 2 16-bit numbers and performs some function on them. The function that is performed is determined by 6 control bits. Each bit indicates that a basic transformation should happen to the inputs, for example, one of the control bits causes one of the inputs to be negated. The two inputs ultimately get combined in some way (either addition or bitwise-and, in this book) and then output.

I wonder what features the ALUs of real CPUs have? I wonder if these ALU functions will end up becoming the keywords of our assembly language? The ALU in this book seems to be based on basic and familiar boolean operations, I wonder if real ALUs might be based on more exotic operations?
** 2.4 - Perspective
*** The adder is inefficient
The adder circuit described in the book is inefficient because of the long delay while the carry bit propagates from the least to most significant bit. Solutions to this problem are known as "carry look-ahead techniques".
*** ALU vs OS tradeoff
The ALU in the book has a minimal set of features. Other ALUs might implement more features, like circuits for multiplication and division and floating-point operations. In general, features implemented in the ALU result in more cost, but are more efficient. Features not implemented in the ALU can be implemented in software (in the operating system); this is cheaper, but less efficient.
** 2.5 - Exercises
*** Multiplexers are kind of like a switch-statements
The uses of multiplexers and demultiplexers aren't yet ingrained in me; I understand what they do, but they aren't second nature to me, and I don't think about using them when trying to solve problems.

While implementing the ALU, I saw that multiplexers are kind of like switch-statements from higher level programming languages; one of several possible outputs in chosen by the selector bits.
* Chapter 3 - Sequential Logic
Every circuit we've built so far has been "combinational" which have no state. Their output is solely dependent on their input in the current moment.

Now we will learn about sequential circuits and how they can store state.
** 3.1 - Background
*** The Clock
The clock sends an alternating bit to many circuits. All circuits are connected to the same clock (although there might be some exceptions to this in real CPUs?).
*** Data flip-flop
In this be we use a "data flip-flop" circuit. A flip-flop outputs the input it received during the last clock tick: ~out(t) = in(t-1)~
*** Registers
A register is a flip-flop plus a multiplexer. We loop the output of the flip-flop into one input of the multiplexer; the other input to the multiplexer is the "bit to be set" and comes from elsewhere. The selector of the multiplexer determines whether the flip-flop will continually be fed its own output or if it will be fed a new input. As long as the flip-flop keeps looping, it will maintain the same value (remember: ~out(t) = in(t-1)~). When the pattern is disrupted by the multiplexer we can change the looping value. Thus, we have a register that can store a single bit of state.
*** RAM
By organizing registers we can create RAM (random access memory). I haven't thought through the whole implementation, but I can see that a combinational circuit could be built that takes a "memory address" and either reads or writes to a register, or group of registers.
*** Counter
A computer can obviously use RAM as a counter, but I think it probably takes multiple clock cycles to increment the value of a register. I think it's going to be useful to have a counter that is syncronized with the clock cycle, and thus we have counters as a separate circuit from RAM.
** 3.2 - Specification
*** Flip-flop
Flip-flops are a built-in gate in this course, just like NAND gates. I need to look into the physical implementation of these gates, since they are the foundation of everything we are building.
*** Bit vs Register vs RAM
Bit < Register < RAM

A register is made of bits (also known as "binary cells"), and RAM is made of registers.
** 3.4 - Perspective
Understanding flip-flop requires understanding how feedback loops work in combinatorial circuits.

In modern computers, the memory is not always built from flip-flops. Instead, there may be unique physical properties of storage technology that can acheive the same thing.
* Chapter 4 - Machine Language
"Make everything as simple as possible, but not simpler."
- Albert Einstein

"Machine language is the most profound interface in the overall computer enterprise -- the fine line where hardware and software meet."
** 4.1 - Background
The processor executes instructions encoded in binary. Assembly is a simple symbolic abstraction of this binary format. Assembly is converted into binary by an "assembler".

Assembly often has direct support for pointers, meaning the hardware itself must have builtin support for handling pointers.

Control flow in assembly is done with jumps which are much like "gotos" in other languages.
** 4.2 - Hack Machine Language Specification
- There are two memories: instruction memory and data memory.
- Assembly arithmetic and logical instructions operate on two registers: ~A~ and ~D~.
- ~M~ in the Hack assembly language refers to the data memory value at the address in register ~A~.
*** Instructions
A-Instruction: ~@value~ loads ~value~ into the A register
C-Instruction: ~dest=comp;jump~; if ~dest~ or ~jump~ are emtpy, then ~=~ or ~;~ may be omitted, respectively
**** Possible dest values:
Any combination of the 3 capital letters: ~AMD~

Order is important. ~A~ should always come first if present, and ~D~ should always come last if present.
**** Possible comp values:
1. 0
2. 1
3. -1
4. D
5. A
6. !D
7. !A
8. -D
9. -A
10. D+1
11. A+1
12. D-1
13. A-1
14. D+A
15. D-A
16. A-D
17. D&A
18. D|A
19. M
20. !M
21. -M
22. M+1
23. M-1
24. D+M
25. D-M
26. M-D
27. D&M
28. D|M
**** Possible jump values:
JLT
JLE
JGT
JGE
JEQ
JNE
JMP
*** Symbols
- Predefined symbols: ~R0~ through ~R15~, ~SP~, ~LCL~, ~ARG~, ~THIS~, ~THAT~ (the latter symbols overlap with ~R0~ through ~R4~)
- ~(Labels)~
- Variables will be turned into static register addresses at compile time.
*** Input / Output devices
**** Screen
The screen is 256 x 512 pixels, which is 8192 16-bit registers, and each row is 32 16-bit registers.

The screen is controlled by a memory map starting at address 16384 (0x4000).
**** Keyboard
When a key is pressed, it's ASCII code appears at address 24576 (0x6000). The value is 0 if no keys are pressed.
** 4.3 - Perspective
The assembly described in the book is simpler than most.
* Appendix A (HDL) - Sections A1-A6
** Example
#+BEGIN_SRC
/** Checks if two 3-bit input buses are equal */
CHIP EQ3 {
    IN a[3], b[3];
    OUT out; // True iff a=b
    PARTS:
    Xor(a=a[0], b=b[0], out=c0);
    Xor(a=a[1], b=b[1], out=c1);
    Xor(a=a[2], b=b[2], out=c2);
    Or(a=c0, b=c1, out=c01);
    Or(a=c01, b=c2, out=neq);
    Not(in=neq, out=out);
}
#+END_SRC

When we use gates (which look like function calls) like ~Xor(...)~, it is assumed that there is a ~Xor.hdl~ file containing the implementation of ~Xor~.
** Index order is right-to-left
If we have ~10~ in binary, the ~0~ is in the ~0~ index position.
** Constants, true and false
~true~ and ~false~ are available constants in HDL, representing 1 and 0 respectively.
** Buses
Internal bus widths are inferred.

This 16-bit incrementor demonstrates how buses can be defined in multiple part: ~Add16(a=in, b[0]=true, b[1..15]=false, out=out);~

~true~ and ~false~ are inferred to be the correct bus width.

A single bit cannot be expanded into a bus with any built in language feature. However you can use a Mux to do this: ~Mux16(sel=singleBit, 0=false, b=true, out=out);~

A circuit can have multiple outputs, and the outputs can be specific bits from an output bus: ~Not16(in=a, out=b, out[0]=c, out[1..4]=d);~
* Circuits
** Chapter 1
- Nand(a=, b=, out=);
- Not(in=, out=);
- Not16(in=, out=);
- And(a=, b=, out=);
- And16(a=, b=, out=);
- Or(a=, b=, out=);
- Or16(a=, b=, out=);
- Or8Way(in=, out=);
- Xor(a=, b=, out=);
- Mux(a=, b=, sel=, out=);
- Mux16(a=, b=, sel=, out=);
- Mux4Way16(a=, b=, c=, d=, sel=, out=);
- Mux8Way16(a=, b=, c=, d=, e=, f=, g=, h=, sel=, out=);
- DMux(in=, sel=, a=, b=);
- DMux4Way(in=, sel=, a=, b=, c=, d=);
- DMux8Way(in=, sel=, a=, b=, c=, d=, e=, f=, g=, h=);
** Chapter 2
- HalfAdder(a=, b=, sum=,  carry=);
- FullAdder(a=, b=, c=, sum=, carry=);
- Add16(a=, b=, out=);
- Inc16(in=, out=);
- ALU(x=, y=, zx=, nx=, zy=, ny=, f=, no=, out=, zr=, ng=);
** Chapter 3
- DFF(in=, out=);
- Bit(in=, load=, out=);
- Register(in=, load=, out=);
- RAM8(in=, load=, address=, out=);
- RAM64(in=, load=, address=, out=);
- RAM512(in=, load=, address=, out=);
- RAM4K(in=, load=, address=, out=);
- RAM16K(in=, load=, address=, out=);
- PC(in=, load=, inc=, reset=, out=);
** Upcoming
- ARegister(in=, load=, out=);
- CPU(inM=, instruction=, reset=, outM=, writeM=, addressM=, pc=);
- DRegister(in=, load=, out=);
- Keyboard(out=);
- Memory(in=, load=, address=, out=);
- ROM32K(address=, out=);
- Screen(in=, load=, address=, out=);
